package com.pahana.edu.utill;

import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.pahana.edu.model.*;
import com.pahana.edu.utill.exception.MyCustomException;
import com.pahana.edu.utill.responseHandling.ButtonPath;

public class BillGenerate {
	public void generateInvoicePdf(Bill bill, List<BillItem> billItems, Customer customer, User user)
			throws MyCustomException {
		try {
			// 1. Create invoices directory inside project root
			String projectRoot = new File("").getAbsolutePath();
			String invoicesDirPath = projectRoot + File.separator + "invoices";
			File invoicesDir = new File(invoicesDirPath);
			if (!invoicesDir.exists() && !invoicesDir.mkdirs()) {
				throw new IOException("Failed to create invoices directory: " + invoicesDirPath);
			}
			String fileName = "invoice_" + bill.getId() + ".pdf";
			String filePath = invoicesDirPath + File.separator + fileName;

			// 2. Create PDF document
			Document document = new Document(PageSize.A4, 36, 36, 72, 72);
			PdfWriter.getInstance(document, new FileOutputStream(filePath));
			document.open();

			// 3. Invoice header
			Paragraph header = new Paragraph("INVOICE",
					FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20, BaseColor.BLACK));
			header.setAlignment(Element.ALIGN_CENTER);
			header.setSpacingAfter(20f);
			document.add(header);

			// 4. Add company logo (optional)
			try {
				// Load from resources folder (works in IDE and JAR)
				Image logo = Image.getInstance(
						getClass().getClassLoader().getResource("images/logo.png"));
				logo.scaleToFit(80, 80);
				logo.setAlignment(Element.ALIGN_LEFT);
				document.add(logo);
			} catch (Exception e) {
				System.err.println("Could not load logo: " + e.getMessage());
			}

			// 5. Header table (company info + invoice details)
			PdfPTable headerTable = new PdfPTable(2);
			headerTable.setWidthPercentage(100);
			headerTable.setSpacingAfter(20f);

			// Left column - Company info
			PdfPCell leftCell = new PdfPCell();
			leftCell.setBorder(Rectangle.NO_BORDER);
			leftCell.addElement(new Paragraph("Pahana Bookshop",
					FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));
			leftCell.addElement(new Paragraph("123 Business Street"));
			leftCell.addElement(new Paragraph("Colombo 02."));
			leftCell.addElement(new Paragraph("Phone: (123) 456-7890"));
			leftCell.addElement(new Paragraph("Email: pahanaedu@company.com"));
			headerTable.addCell(leftCell);

			// Right column - Invoice details
			PdfPCell rightCell = new PdfPCell();
			rightCell.setBorder(Rectangle.NO_BORDER);
			rightCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			rightCell.addElement(new Paragraph("Invoice #: " + bill.getId(),
					FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));
			rightCell.addElement(
					new Paragraph("Date: " + new SimpleDateFormat("dd MMMM yyyy, HH:mm").format(new Date())));
			rightCell.addElement(new Paragraph("Generated by: " + user.getUsername()));
			headerTable.addCell(rightCell);
			document.add(headerTable);

			// 6. Customer information
			Paragraph customerHeader = new Paragraph("BILL TO:",
					FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12));
			customerHeader.setSpacingBefore(15f);
			document.add(customerHeader);

			PdfPTable customerTable = new PdfPTable(1);
			customerTable.setWidthPercentage(50);
			customerTable.setSpacingAfter(15f);
			PdfPCell customerCell = new PdfPCell();
			customerCell.setBorder(Rectangle.NO_BORDER);
			customerCell.addElement(new Paragraph(customer.getFirstName() + " " + customer.getLastName()));
			customerCell.addElement(new Paragraph(customer.getAddress()));
			customerCell.addElement(new Paragraph(customer.getEmail()));
			customerTable.addCell(customerCell);
			document.add(customerTable);

			// 7. Items table
			PdfPTable table = new PdfPTable(6);
			table.setWidthPercentage(100);
			table.setSpacingBefore(20f);
			table.setSpacingAfter(20f);
			float[] columnWidths = { 2f, 3f, 1.5f, 1.5f, 1.5f, 2f };
			table.setWidths(columnWidths);

			// Table headers
			Font headerFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10, BaseColor.WHITE);
			addTableHeader(table, "ISBN", headerFont, BaseColor.DARK_GRAY);
			addTableHeader(table, "Item", headerFont, BaseColor.DARK_GRAY);
			addTableHeader(table, "Qty", headerFont, BaseColor.DARK_GRAY);
			addTableHeader(table, "Unit Price", headerFont, BaseColor.DARK_GRAY);
			addTableHeader(table, "Discount", headerFont, BaseColor.DARK_GRAY);
			addTableHeader(table, "Subtotal", headerFont, BaseColor.DARK_GRAY);

			// Add items with alternating row colors
			BaseColor lightGray = new BaseColor(240, 240, 240);
			boolean alternate = false;

			// FIX: Create new BillItem for each iteration
			for (BillItem billItem : billItems) {
				Item item = billItem.getItem();

				addTableRow(table,
						item.getIsbn(),
						item.getTitle(),
						String.valueOf(billItem.getQuantity()),
						String.format("Rs. %.2f", billItem.getUnitPrice()),
						String.format("Rs. %.2f", billItem.getDiscountAmount()),
						String.format("Rs. %.2f", billItem.getSubTotal()),
						alternate ? lightGray : BaseColor.WHITE);
				alternate = !alternate;
			}
			document.add(table);

			// 8. Totals section
			PdfPTable totalsTable = new PdfPTable(2);
			totalsTable.setWidthPercentage(50);
			totalsTable.setHorizontalAlignment(Element.ALIGN_RIGHT);
			totalsTable.setSpacingBefore(10f);

			addTotalRow(totalsTable, "Subtotal:", String.format("Rs. %.2f", bill.getTotalAmount()));
			addTotalRow(totalsTable, "Discount:", String.format("Rs. %.2f", bill.getDiscountAmount()));

			// Grand total
			PdfPCell labelCell = new PdfPCell(new Phrase("TOTAL:",
					FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));
			labelCell.setBorder(Rectangle.NO_BORDER);
			labelCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			totalsTable.addCell(labelCell);

			PdfPCell valueCell = new PdfPCell(new Phrase(String.format("Rs. %.2f", bill.getNetAmount()),
					FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));
			valueCell.setBorder(Rectangle.NO_BORDER);
			valueCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			totalsTable.addCell(valueCell);

			document.add(totalsTable);

			// 9. Footer
			Paragraph footer = new Paragraph("\n\nThank you for come again!",
					FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 10));
			footer.setAlignment(Element.ALIGN_CENTER);
			document.add(footer);

			Paragraph terms = new Paragraph("\nTerms & Conditions: Payment due within 30 days.",
					FontFactory.getFont(FontFactory.HELVETICA, 8));
			terms.setAlignment(Element.ALIGN_CENTER);
			document.add(terms);

			// 10. Close document
			document.close();
			System.out.println("Invoice generated at: " + new File(filePath).getAbsolutePath());

			// 11. Open PDF automatically
			try {
				File pdfFile = new File(filePath);
				if (pdfFile.exists()) {
					if (Desktop.isDesktopSupported()) {
						Desktop.getDesktop().open(pdfFile);
					} else {
						System.out.println("Desktop not supported, cannot open PDF automatically.");
					}
				} else {
					System.out.println("PDF file not found: " + filePath);
				}
			} catch (IOException e) {
				System.out.println("Failed to open PDF: " + e.getMessage());
			}

		} catch (Exception e) {
			throw new MyCustomException("Failed to generate PDF invoice: " + e.getMessage(), ButtonPath.CASHIER);
		}
	}

	// Helper method to add styled table headers
	private void addTableHeader(PdfPTable table, String text, Font font, BaseColor bgColor) {
		PdfPCell header = new PdfPCell(new Phrase(text, font));
		header.setBackgroundColor(bgColor);
		header.setHorizontalAlignment(Element.ALIGN_CENTER);
		header.setVerticalAlignment(Element.ALIGN_MIDDLE);
		header.setPadding(5);
		table.addCell(header);
	}

	// Helper method to add total rows
	private void addTotalRow(PdfPTable table, String label, String value) {
		// Label cell
		PdfPCell labelCell = new PdfPCell(new Phrase(label));
		labelCell.setBorder(Rectangle.NO_BORDER);
		labelCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		table.addCell(labelCell);

		// Value cell
		PdfPCell valueCell = new PdfPCell(new Phrase(value));
		valueCell.setBorder(Rectangle.NO_BORDER);
		valueCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		table.addCell(valueCell);
	}

	// Helper method to add complete table rows
	private void addTableRow(PdfPTable table,
			String isbn,
			String title,
			String quantity,
			String unitPrice,
			String discount,
			String subtotal,
			BaseColor bgColor) {

		// ISBN cell
		PdfPCell isbnCell = new PdfPCell(new Phrase(isbn));
		isbnCell.setBackgroundColor(bgColor);
		table.addCell(isbnCell);

		// Title cell
		PdfPCell titleCell = new PdfPCell(new Phrase(title));
		titleCell.setBackgroundColor(bgColor);
		table.addCell(titleCell);

		// Quantity cell
		PdfPCell qtyCell = new PdfPCell(new Phrase(quantity));
		qtyCell.setBackgroundColor(bgColor);
		qtyCell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(qtyCell);

		// Unit Price cell
		PdfPCell priceCell = new PdfPCell(new Phrase(unitPrice));
		priceCell.setBackgroundColor(bgColor);
		priceCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		table.addCell(priceCell);

		// Discount cell
		PdfPCell discountCell = new PdfPCell(new Phrase(discount));
		discountCell.setBackgroundColor(bgColor);
		discountCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		table.addCell(discountCell);

		// Subtotal cell
		PdfPCell subtotalCell = new PdfPCell(new Phrase(subtotal));
		subtotalCell.setBackgroundColor(bgColor);
		subtotalCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		table.addCell(subtotalCell);
	}
}
